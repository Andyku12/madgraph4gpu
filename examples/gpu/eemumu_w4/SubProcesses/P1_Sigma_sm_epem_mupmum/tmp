--- a/examples/gpu/gg_ttg_auto/SubProcesses/P1_Sigma_sm_gg_ttxg/CPPProcess.cu
+++ b/examples/gpu/gg_ttg_auto/SubProcesses/P1_Sigma_sm_gg_ttxg/CPPProcess.cu
@@ -28,17 +28,17 @@ __constant__ double cIPD[2];

 // Evaluate |M|^2 for each subprocess

-__device__ void calculate_wavefunctions(int ihel, char * dps, size_t dpt,
+__device__ void calculate_wavefunctions(int ihel, double local_mom[5][4], size_t dpt,
     double &matrix)
 {
   thrust::complex<double> amp[18];
   // Calculate wavefunctions for all processes
   thrust::complex<double> w[12][6];
-  vxxxxx((double * )(dps + 0 * dpt), 0., cHel[ihel][0], -1, w[0]);
-  vxxxxx((double * )(dps + 1 * dpt), 0., cHel[ihel][1], -1, w[1]);
-  oxxxxx((double * )(dps + 2 * dpt), cIPD[0], cHel[ihel][2], +1, w[2]);
-  ixxxxx((double * )(dps + 3 * dpt), cIPD[0], cHel[ihel][3], -1, w[3]);
-  vxxxxx((double * )(dps + 4 * dpt), 0., cHel[ihel][4], +1, w[4]);
+  vxxxxx(local_mom[0], 0., cHel[ihel][0], -1, w[0]);
+  vxxxxx(local_mom[1], 0., cHel[ihel][1], -1, w[1]);
+  oxxxxx(local_mom[2], cIPD[0], cHel[ihel][2], +1, w[2]);
+  ixxxxx(local_mom[3], cIPD[0], cHel[ihel][3], -1, w[3]);
+  vxxxxx(local_mom[4], 0., cHel[ihel][4], +1, w[4]);
   VVV1P0_1(w[0], w[1], thrust::complex<double> (cIPC[0], cIPC[1]), 0., 0.,
       w[5]);
   FFV1P0_3(w[3], w[2], thrust::complex<double> (cIPC[2], cIPC[3]), 0., 0.,
@@ -226,7 +226,8 @@ void CPPProcess::initProc(string param_card_name)
 //--------------------------------------------------------------------------
 // Evaluate |M|^2, part independent of incoming flavour.

-__global__ void sigmaKin(cudaPitchedPtr tp, double * meDevPtr, size_t mePitch)
+__global__ void sigmaKin(double * momemta)
+               //cudaPitchedPtr tp, double * meDevPtr, size_t mePitch)
 {
   // Set the parameters which change event by event
   // Need to discuss this with Stefan
@@ -236,12 +237,18 @@ __global__ void sigmaKin(cudaPitchedPtr tp, double * meDevPtr, size_t mePitch)
   // Reset color flows

   // for (int xx = 0; xx < 384; ++xx) {
+  double local_mom[5][4];
   int nprocesses = 1;
   int dim = blockIdx.x * blockDim.x + threadIdx.x;
+  int DIM = blockDim.x  * threadDim.x;
+  for (int i=0; i< 5; i++){
+         for (int j=0;j<4;j++){
+       local_mom[i][j] = momenta[i*5*DIM+j*DIM+dim]
+         }}

   char * devPtr = (char * )tp.ptr;
   size_t dpt = tp.pitch;
-  size_t slicePitch = dpt * 4;
u00u4ok9ei9Y7ArOLg357@cpu0547:~/madgraph4gpu/examples/gpu/gg_ttg_auto/SubProcesses/P1_Sigma_sm_gg_ttxg$ git diff > mytest.diff
u00u4ok9ei9Y7ArOLg357@cpu0547:~/madgraph4gpu/examples/gpu/gg_ttg_auto/SubProcesses/P1_Sigma_sm_gg_ttxg$ cat mytest.diff
diff --git a/examples/gpu/gg_ttg_auto/SubProcesses/P1_Sigma_sm_gg_ttxg/CPPProcess.cu b/examples/gpu/gg_ttg_auto/SubProcesses/P1_Sigma_sm_gg_ttxg/CPPProcess.cu
index 8c56a77..c63cc60 100644
--- a/examples/gpu/gg_ttg_auto/SubProcesses/P1_Sigma_sm_gg_ttxg/CPPProcess.cu
+++ b/examples/gpu/gg_ttg_auto/SubProcesses/P1_Sigma_sm_gg_ttxg/CPPProcess.cu
@@ -28,17 +28,17 @@ __constant__ double cIPD[2];

 // Evaluate |M|^2 for each subprocess

-__device__ void calculate_wavefunctions(int ihel, char * dps, size_t dpt,
+__device__ void calculate_wavefunctions(int ihel, double local_mom[5][4], size_t dpt,
     double &matrix)
 {
   thrust::complex<double> amp[18];
   // Calculate wavefunctions for all processes
   thrust::complex<double> w[12][6];
-  vxxxxx((double * )(dps + 0 * dpt), 0., cHel[ihel][0], -1, w[0]);
-  vxxxxx((double * )(dps + 1 * dpt), 0., cHel[ihel][1], -1, w[1]);
-  oxxxxx((double * )(dps + 2 * dpt), cIPD[0], cHel[ihel][2], +1, w[2]);
-  ixxxxx((double * )(dps + 3 * dpt), cIPD[0], cHel[ihel][3], -1, w[3]);
-  vxxxxx((double * )(dps + 4 * dpt), 0., cHel[ihel][4], +1, w[4]);
+  vxxxxx(local_mom[0], 0., cHel[ihel][0], -1, w[0]);
+  vxxxxx(local_mom[1], 0., cHel[ihel][1], -1, w[1]);
+  oxxxxx(local_mom[2], cIPD[0], cHel[ihel][2], +1, w[2]);
+  ixxxxx(local_mom[3], cIPD[0], cHel[ihel][3], -1, w[3]);
+  vxxxxx(local_mom[4], 0., cHel[ihel][4], +1, w[4]);
   VVV1P0_1(w[0], w[1], thrust::complex<double> (cIPC[0], cIPC[1]), 0., 0.,
       w[5]);
   FFV1P0_3(w[3], w[2], thrust::complex<double> (cIPC[2], cIPC[3]), 0., 0.,
@@ -226,7 +226,8 @@ void CPPProcess::initProc(string param_card_name)
 //--------------------------------------------------------------------------
 // Evaluate |M|^2, part independent of incoming flavour.

-__global__ void sigmaKin(cudaPitchedPtr tp, double * meDevPtr, size_t mePitch)
+__global__ void sigmaKin(double * momemta)
+		//cudaPitchedPtr tp, double * meDevPtr, size_t mePitch)
 {
   // Set the parameters which change event by event
   // Need to discuss this with Stefan
@@ -236,12 +237,18 @@ __global__ void sigmaKin(cudaPitchedPtr tp, double * meDevPtr, size_t mePitch)
   // Reset color flows

   // for (int xx = 0; xx < 384; ++xx) {
+  double local_mom[5][4];
   int nprocesses = 1;
   int dim = blockIdx.x * blockDim.x + threadIdx.x;
+  int DIM = blockDim.x  * threadDim.x;
+  for (int i=0; i< 5; i++){
+	  for (int j=0;j<4;j++){
+	local_mom[i][j] = momenta[i*5*DIM+j*DIM+dim]
+	  }}

   char * devPtr = (char * )tp.ptr;
   size_t dpt = tp.pitch;
-  size_t slicePitch = dpt * 4;
+  size_t slicePitch = dpt * 5;

   char * dps = devPtr + dim * slicePitch;
   double * matrix_element = (double * )((char * )meDevPtr + dim * mePitch);
@@ -284,7 +291,7 @@ __global__ void sigmaKin(cudaPitchedPtr tp, double * meDevPtr, size_t mePitch)

   for (int ihel = 0; ihel < ncomb; ihel++ )
   {
-    calculate_wavefunctions(ihel, dps, dpt, matrix_element[0]);
+    calculate_wavefunctions(ihel, local_mom, matrix_element[0]);
   }


diff --git a/examples/gpu/gg_ttg_auto/SubProcesses/P1_Sigma_sm_gg_ttxg/check_sa.cu b/examples/gpu/gg_ttg_auto/SubProcesses/P1_Sigma_sm_gg_ttxg/check_sa.cu
index ca7153e..318b75a 100644
--- a/examples/gpu/gg_ttg_auto/SubProcesses/P1_Sigma_sm_gg_ttxg/check_sa.cu
+++ b/examples/gpu/gg_ttg_auto/SubProcesses/P1_Sigma_sm_gg_ttxg/check_sa.cu
@@ -91,27 +91,25 @@ int main(int argc, char **argv) {
   int dim = gpublocks * gputhreads;

   // Local Memory
-  double lp[dim][5][4];
-
-  // GPU memory
-  // from http://www.orangeowlsolutions.com/archives/817
-  cudaExtent extent = make_cudaExtent(5 * sizeof(double), 4, dim);
-  cudaPitchedPtr devPitchedPtr;
-  gpuErrchk3(cudaMalloc3D(&devPitchedPtr, extent));
-
-  cudaMemcpy3DParms tdp = {0};
-  tdp.srcPtr.ptr = lp;
-  tdp.srcPtr.pitch = 5 * sizeof(double);
-  tdp.srcPtr.xsize = 4;
-  tdp.srcPtr.ysize = 4;
-  tdp.dstPtr.ptr = devPitchedPtr.ptr;
-  tdp.dstPtr.pitch = devPitchedPtr.pitch;
-  tdp.dstPtr.xsize = 4;
-  tdp.dstPtr.ysize = 4;
-  tdp.extent.width = 5 * sizeof(double);
-  tdp.extent.height = 4;
-  tdp.extent.depth = dim;
-  tdp.kind = cudaMemcpyHostToDevice;
+  double lp[5*4*dim];
+
+  int num_bytes = 4*5*dim * sizeof(double);
+
+  // pointers to host & device arrays
+  int *device_array = 0;
+  int *host_array = 0;
+
+  // malloc a host array
+  //host_array =  //(int*)malloc(num_bytes);
+
+  // cudaMalloc a device array
+  cudaMalloc((void**)&device_array, num_bytes);
+
+  //int block_size = 128;
+  //int grid_size = num_elements / block_size;
+//cudaMemcpy(deviceArray,lp,num_bytes,cudaMemcpyHostToDevice);
+
+

   double meHostPtr[dim][1]; // dim = rows, 1 = cols
   double *meDevPtr;
@@ -130,11 +128,11 @@ int main(int argc, char **argv) {
     for (int d = 0; d < dim; ++d) {
       for (int i = 0; i < 5; ++i) {
         for (int j = 0; j < 4; ++j) {
-          lp[d][i][j] = p[d][i][j];
+          lp[i*dim*4+j*dim+d] = p[d][i][j];
         }
       }
     }
-
+    cudaMemcpy(deviceArray,lp,num_bytes,cudaMemcpyHostToDevice);
     gpuErrchk3(cudaMemcpy3D(&tdp));

    //process.preSigmaKin();
@@ -146,8 +144,7 @@ int main(int argc, char **argv) {
     // Evaluate matrix element
     // later process.sigmaKin(ncomb, goodhel, ntry, sum_hel, ngood, igood,
     // jhel);
-    sigmaKin<<<gpublocks, gputhreads>>>(devPitchedPtr, meDevPtr,
-                                                 mePitch);//, debug, verbose);
+    sigmaKin<<<gpublocks, gputhreads>>>(devicearray);//, debug, verbose);

     gpuErrchk3(cudaMemcpy2D(meHostPtr, sizeof(double), meDevPtr, mePitch,
                             sizeof(double), dim, cudaMemcpyDeviceToHost));
diff --git a/examples/gpu/gg_ttg_auto/src/HelAmps_sm.cu b/examples/gpu/gg_ttg_auto/src/HelAmps_sm.cu
index 2aa5ac2..f1c915b 100644
--- a/examples/gpu/gg_ttg_auto/src/HelAmps_sm.cu
+++ b/examples/gpu/gg_ttg_auto/src/HelAmps_sm.cu
@@ -21,7 +21,8 @@ thrust::complex<double> fi[6])
 {
   thrust::complex<double> chi[2];
   double sf[2], sfomega[2], omega[2], pp, pp3, sqp0p3, sqm[2];
-  int ip, im, nh;
+  int ip, im, nh;
+  printf("i %f %f %f %f\n", p[0], p[1],p[2],p[3]);
   fi[0] = thrust::complex<double> (-p[0] * nsf, -p[3] * nsf);
   fi[1] = thrust::complex<double> (-p[1] * nsf, -p[2] * nsf);
   nh = nhel * nsf;
@@ -288,6 +289,7 @@ thrust::complex<double> vc[6])
   pt2 = (p[1] * p[1]) + (p[2] * p[2]);
   pp = min(p[0], sqrt(pt2 + (p[3] * p[3])));
   pt = min(pp, sqrt(pt2));
+   printf("v %f %f %f %f\n", p[0], p[1],p[2],p[3]);
   vc[0] = thrust::complex<double> (p[0] * nsv, p[3] * nsv);
   vc[1] = thrust::complex<double> (p[1] * nsv, p[2] * nsv);
   if (vmass != 0.0)
@@ -358,6 +360,7 @@ thrust::complex<double> fo[6])
   thrust::complex<double> chi[2];
   double sf[2], sfomeg[2], omega[2], pp, pp3, sqp0p3, sqm[2];
   int nh, ip, im;
+   printf("o %f %f %f %f\n", p[0], p[1],p[2],p[3]);
   fo[0] = thrust::complex<double> (p[0] * nsf, p[3] * nsf);
   fo[1] = thrust::complex<double> (p[1] * nsf, p[2] * nsf);
   nh = nhel * nsf;