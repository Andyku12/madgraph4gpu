#include "mgOnGpuConfig.h"
#include "mgOnGpuTypes.h"
//#include "mgOnGpuVectors.h"

#include "CPPProcess.h"
#include "Memory.h"

#include <array>
#include <cassert>
#include <iomanip>
#include <iostream>
#include <vector>

#include <gtest/gtest.h>
#include "epoch_process_id.h"
#define TESTID_CPU(s) s##_CPU
#define XTESTID_CPU(s) TESTID_CPU(s)

TEST( XTESTID_CPU(MG_EPOCH_PROCESS_ID), testxxx )
{
  constexpr bool dumpEvents = false; // dump the expected output of the test?
  constexpr bool testEvents = true; // run the test?
  constexpr fptype toleranceXXXs = std::is_same<fptype, double>::value ? 1.E-15 : 1.E-5;
  // Constant parameters
  using mgOnGpu::np4;
  using mgOnGpu::npar;
  using mgOnGpu::neppM;
  const int nevt = 8;
  assert( nevt%neppM == 0 ); // nevt must be a multiple of neppM
  // Fill in the input momenta
  const int nMomenta = np4*npar*nevt; 
  //auto hstMomenta = hstMakeUnique<fptype_sv>( nMomenta ); // AOSOA[npagM][npar=4][np4=4][neppM]
  auto hstMomenta = hstMakeUnique<fptype>( nMomenta ); // AOSOA[npagM][npar=4][np4=4][neppM]
  const fptype par0[np4*nevt] { // AOS[nevt][np4]
    500, 0, 0, 500, // #0 (m=0 pT=0 E=pz>0)
    500, 0, 0, -500, // #1 (m=0 pT=0 E=-pz>0)
    500, 300, 400, 0, // #2 (m=0 pT>0 pz=0)
    500, 180, 240, 400, // #3 (m=0 pT>0 pz>0)
    500, 180, 240, -400, // #4 (m=0 pT>0 pz<0)
    500., 0., 0., 0., // #5 (m=50>0 pT=0 pz=0)
    500, 0, 0, -300, // #6 (m=40>0 pT=0 pz<0)
    500., 180., 192., -144., // #7 (m=40>0 pT>0 pz<0)
  };
  fptype mass0[nevt]{};
  bool ispzgt0[nevt]{};
  bool ispzlt0[nevt]{};
  bool isptgt0[nevt]{};
  for ( int ievt=0; ievt<nevt; ievt++ )
  {
    const fptype p0 = par0[ievt*np4 + 0];
    const fptype p1 = par0[ievt*np4 + 1];
    const fptype p2 = par0[ievt*np4 + 2];
    const fptype p3 = par0[ievt*np4 + 3];
    mass0[ievt] = sqrt( p0*p0 - p1*p1 - p2*p2 - p3*p3 );
    ispzgt0[ievt] = ( p3 > 0 );
    ispzlt0[ievt] = ( p3 < 0 );
    isptgt0[ievt] = ( p1 != 0 ) || ( p2 != 0 );
  }
  const int ipar=0; // use only particle0 for this test
  for ( int ievt=0; ievt<nevt; ievt++ )
  {
    for ( int ip4=0; ip4<np4; ip4++ )
    {
      const int ipagM = ievt/neppM; // #eventpage in this iteration
      const int ieppM = ievt%neppM; // #event in the current eventpage in this iteration
      //#ifdef MGONGPU_CPPSIMD
      //hstMomenta[ipagM*npar*np4 + ipar*np4 + ip4][ieppM] = par0[ievt*np4 + ip4]; // AOS to AOSOA
      //#else
      hstMomenta[ipagM*npar*np4*neppM + ipar*np4*neppM + ip4*neppM + ieppM] = par0[ievt*np4 + ip4]; // AOS to AOSOA
      //#endif
    }
  }
  // Expected output wavefunctions
  std::vector< std::array<fptype,12> > expwfs;
  expwfs.push_back( {                                   // ---------
     5.000000000000000e+02,  5.000000000000000e+02,     // ixxxxx #0
     0.000000000000000e+00,  0.000000000000000e+00,     // ixxxxx #0
     0.000000000000000e+00, -0.000000000000000e+00,     // ixxxxx #0
    -3.162277660168379e+01,  0.000000000000000e+00,     // ixxxxx #0
     0.000000000000000e+00,  0.000000000000000e+00,     // ixxxxx #0
     0.000000000000000e+00,  0.000000000000000e+00 } ); // ixxxxx #0
  expwfs.push_back( {                                   // ---------
     5.000000000000000e+02,  5.000000000000000e+02,     // ipzxxx #0
     0.000000000000000e+00,  0.000000000000000e+00,     // ipzxxx #0
     0.000000000000000e+00,  0.000000000000000e+00,     // ipzxxx #0
    -3.162277660168379e+01,  0.000000000000000e+00,     // ipzxxx #0
     0.000000000000000e+00,  0.000000000000000e+00,     // ipzxxx #0
     0.000000000000000e+00,  0.000000000000000e+00 } ); // ipzxxx #0
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02, -5.000000000000000e+02,     // vxxxxx #0
    -0.000000000000000e+00, -0.000000000000000e+00,     // vxxxxx #0
     0.000000000000000e+00,  0.000000000000000e+00,     // vxxxxx #0
    -7.071067811865476e-01,  0.000000000000000e+00,     // vxxxxx #0
     0.000000000000000e+00,  0.000000000000000e+00,     // vxxxxx #0
     0.000000000000000e+00,  0.000000000000000e+00 } ); // vxxxxx #0
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02, -5.000000000000000e+02,     // sxxxxx #0
    -0.000000000000000e+00, -0.000000000000000e+00,     // sxxxxx #0
     1.000000000000000e+00,  0.000000000000000e+00,     // sxxxxx #0
    -7.071067811865476e-01,  0.000000000000000e+00,     // sxxxxx #0
     0.000000000000000e+00,  0.000000000000000e+00,     // sxxxxx #0
     0.000000000000000e+00,  0.000000000000000e+00 } ); // sxxxxx #0
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02, -5.000000000000000e+02,     // oxxxxx #0
    -0.000000000000000e+00, -0.000000000000000e+00,     // oxxxxx #0
     0.000000000000000e+00,  0.000000000000000e+00,     // oxxxxx #0
     0.000000000000000e+00,  0.000000000000000e+00,     // oxxxxx #0
     0.000000000000000e+00,  0.000000000000000e+00,     // oxxxxx #0
    -3.162277660168379e+01,  0.000000000000000e+00 } ); // oxxxxx #0
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02, -5.000000000000000e+02,     // opzxxx #0
     0.000000000000000e+00,  0.000000000000000e+00,     // opzxxx #0
     0.000000000000000e+00,  0.000000000000000e+00,     // opzxxx #0
     0.000000000000000e+00,  0.000000000000000e+00,     // opzxxx #0
     0.000000000000000e+00,  0.000000000000000e+00,     // opzxxx #0
    -3.162277660168379e+01,  0.000000000000000e+00 } ); // opzxxx #0
  expwfs.push_back( {                                   // ---------
     5.000000000000000e+02, -5.000000000000000e+02,     // ixxxxx #1
     0.000000000000000e+00,  0.000000000000000e+00,     // ixxxxx #1
    -3.162277660168379e+01,  0.000000000000000e+00,     // ixxxxx #1
     0.000000000000000e+00,  0.000000000000000e+00,     // ixxxxx #1
     0.000000000000000e+00,  0.000000000000000e+00,     // ixxxxx #1
     0.000000000000000e+00,  0.000000000000000e+00 } ); // ixxxxx #1
  expwfs.push_back( {                                   // ---------
     5.000000000000000e+02, -5.000000000000000e+02,     // imzxxx #1
     0.000000000000000e+00,  0.000000000000000e+00,     // imzxxx #1
    -3.162277660168379e+01,  0.000000000000000e+00,     // imzxxx #1
     0.000000000000000e+00,  0.000000000000000e+00,     // imzxxx #1
     0.000000000000000e+00,  0.000000000000000e+00,     // imzxxx #1
     0.000000000000000e+00,  0.000000000000000e+00 } ); // imzxxx #1
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02,  5.000000000000000e+02,     // vxxxxx #1
    -0.000000000000000e+00, -0.000000000000000e+00,     // vxxxxx #1
     0.000000000000000e+00,  0.000000000000000e+00,     // vxxxxx #1
    -7.071067811865476e-01,  0.000000000000000e+00,     // vxxxxx #1
     0.000000000000000e+00,  0.000000000000000e+00,     // vxxxxx #1
     0.000000000000000e+00,  0.000000000000000e+00 } ); // vxxxxx #1
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02,  5.000000000000000e+02,     // sxxxxx #1
    -0.000000000000000e+00, -0.000000000000000e+00,     // sxxxxx #1
     1.000000000000000e+00,  0.000000000000000e+00,     // sxxxxx #1
    -7.071067811865476e-01,  0.000000000000000e+00,     // sxxxxx #1
     0.000000000000000e+00,  0.000000000000000e+00,     // sxxxxx #1
     0.000000000000000e+00,  0.000000000000000e+00 } ); // sxxxxx #1
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02,  5.000000000000000e+02,     // oxxxxx #1
    -0.000000000000000e+00, -0.000000000000000e+00,     // oxxxxx #1
     0.000000000000000e+00,  0.000000000000000e+00,     // oxxxxx #1
     0.000000000000000e+00,  0.000000000000000e+00,     // oxxxxx #1
    -3.162277660168379e+01,  0.000000000000000e+00,     // oxxxxx #1
     0.000000000000000e+00,  0.000000000000000e+00 } ); // oxxxxx #1
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02,  5.000000000000000e+02,     // omzxxx #1
     0.000000000000000e+00,  0.000000000000000e+00,     // omzxxx #1
     0.000000000000000e+00,  0.000000000000000e+00,     // omzxxx #1
     0.000000000000000e+00,  0.000000000000000e+00,     // omzxxx #1
    -3.162277660168379e+01,  0.000000000000000e+00,     // omzxxx #1
    -3.162277660168379e+01,  0.000000000000000e+00 } ); // omzxxx #1
  expwfs.push_back( {                                   // ---------
     5.000000000000000e+02,  0.000000000000000e+00,     // ixxxxx #2
     3.000000000000000e+02,  4.000000000000000e+02,     // ixxxxx #2
     1.341640786499874e+01, -1.788854381999832e+01,     // ixxxxx #2
    -2.236067977499790e+01,  0.000000000000000e+00,     // ixxxxx #2
     0.000000000000000e+00,  0.000000000000000e+00,     // ixxxxx #2
     0.000000000000000e+00,  0.000000000000000e+00 } ); // ixxxxx #2
  expwfs.push_back( {                                   // ---------
     5.000000000000000e+02,  4.000000000000000e+02,     // ixzxxx #2
     5.000000000000000e+02,  3.000000000000000e+02,     // ixzxxx #2
     1.341640786499874e+01, -1.788854381999832e+01,     // ixzxxx #2
    -2.236067977499790e+01,  0.000000000000000e+00,     // ixzxxx #2
     0.000000000000000e+00,  0.000000000000000e+00,     // ixzxxx #2
     0.000000000000000e+00,  0.000000000000000e+00 } ); // ixzxxx #2
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02, -0.000000000000000e+00,     // vxxxxx #2
    -3.000000000000000e+02, -4.000000000000000e+02,     // vxxxxx #2
     0.000000000000000e+00,  0.000000000000000e+00,     // vxxxxx #2
    -0.000000000000000e+00,  5.656854249492381e-01,     // vxxxxx #2
    -0.000000000000000e+00, -4.242640687119285e-01,     // vxxxxx #2
     7.071067811865476e-01,  0.000000000000000e+00 } ); // vxxxxx #2
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02, -0.000000000000000e+00,     // sxxxxx #2
    -3.000000000000000e+02, -4.000000000000000e+02,     // sxxxxx #2
     1.000000000000000e+00,  0.000000000000000e+00,     // sxxxxx #2
    -0.000000000000000e+00,  5.656854249492381e-01,     // sxxxxx #2
    -0.000000000000000e+00, -4.242640687119285e-01,     // sxxxxx #2
     7.071067811865476e-01,  0.000000000000000e+00 } ); // sxxxxx #2
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02, -0.000000000000000e+00,     // oxxxxx #2
    -3.000000000000000e+02, -4.000000000000000e+02,     // oxxxxx #2
     0.000000000000000e+00,  0.000000000000000e+00,     // oxxxxx #2
     0.000000000000000e+00,  0.000000000000000e+00,     // oxxxxx #2
     1.341640786499874e+01,  1.788854381999832e+01,     // oxxxxx #2
    -2.236067977499790e+01,  0.000000000000000e+00 } ); // oxxxxx #2
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02, -0.000000000000000e+00,     // oxzxxx #2
    -3.000000000000000e+02, -4.000000000000000e+02,     // oxzxxx #2
     0.000000000000000e+00,  0.000000000000000e+00,     // oxzxxx #2
     0.000000000000000e+00,  0.000000000000000e+00,     // oxzxxx #2
     1.341640786499874e+01,  1.788854381999832e+01,     // oxzxxx #2
    -2.236067977499790e+01,  0.000000000000000e+00 } ); // oxzxxx #2
  expwfs.push_back( {                                   // ---------
     5.000000000000000e+02,  4.000000000000000e+02,     // ixxxxx #3
     1.800000000000000e+02,  2.400000000000000e+02,     // ixxxxx #3
     6.000000000000000e+00, -8.000000000000000e+00,     // ixxxxx #3
    -3.000000000000000e+01,  0.000000000000000e+00,     // ixxxxx #3
     0.000000000000000e+00,  0.000000000000000e+00,     // ixxxxx #3
     0.000000000000000e+00,  0.000000000000000e+00 } ); // ixxxxx #3
  expwfs.push_back( {                                   // ---------
     4.000000000000000e+02,  4.000000000000000e+02,     // ipzxxx #3
     0.000000000000000e+00,  0.000000000000000e+00,     // ipzxxx #3
     0.000000000000000e+00,  0.000000000000000e+00,     // ipzxxx #3
    -2.828427124746190e+01,  0.000000000000000e+00,     // ipzxxx #3
     0.000000000000000e+00,  0.000000000000000e+00,     // ipzxxx #3
     0.000000000000000e+00,  0.000000000000000e+00 } ); // ipzxxx #3
  expwfs.push_back( {                                   // ---------
     5.000000000000000e+02,  2.400000000000000e+02,     // ixzxxx #3
     5.000000000000000e+02,  1.800000000000000e+02,     // ixzxxx #3
     6.000000000000000e+00, -8.000000000000000e+00,     // ixzxxx #3
    -3.000000000000000e+01,  0.000000000000000e+00,     // ixzxxx #3
     0.000000000000000e+00,  0.000000000000000e+00,     // ixzxxx #3
     0.000000000000000e+00,  0.000000000000000e+00 } ); // ixzxxx #3
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02, -4.000000000000000e+02,     // vxxxxx #3
    -1.800000000000000e+02, -2.400000000000000e+02,     // vxxxxx #3
     0.000000000000000e+00,  0.000000000000000e+00,     // vxxxxx #3
    -3.394112549695428e-01,  5.656854249492381e-01,     // vxxxxx #3
    -4.525483399593904e-01, -4.242640687119285e-01,     // vxxxxx #3
     4.242640687119285e-01,  0.000000000000000e+00 } ); // vxxxxx #3
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02, -4.000000000000000e+02,     // sxxxxx #3
    -1.800000000000000e+02, -2.400000000000000e+02,     // sxxxxx #3
     1.000000000000000e+00,  0.000000000000000e+00,     // sxxxxx #3
    -3.394112549695428e-01,  5.656854249492381e-01,     // sxxxxx #3
    -4.525483399593904e-01, -4.242640687119285e-01,     // sxxxxx #3
     4.242640687119285e-01,  0.000000000000000e+00 } ); // sxxxxx #3
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02, -4.000000000000000e+02,     // oxxxxx #3
    -1.800000000000000e+02, -2.400000000000000e+02,     // oxxxxx #3
     0.000000000000000e+00,  0.000000000000000e+00,     // oxxxxx #3
     0.000000000000000e+00,  0.000000000000000e+00,     // oxxxxx #3
     6.000000000000000e+00,  8.000000000000000e+00,     // oxxxxx #3
    -3.000000000000000e+01,  0.000000000000000e+00 } ); // oxxxxx #3
  expwfs.push_back( {                                   // ---------
    -4.000000000000000e+02, -4.000000000000000e+02,     // opzxxx #3
     0.000000000000000e+00,  0.000000000000000e+00,     // opzxxx #3
     0.000000000000000e+00,  0.000000000000000e+00,     // opzxxx #3
     0.000000000000000e+00,  0.000000000000000e+00,     // opzxxx #3
     0.000000000000000e+00,  0.000000000000000e+00,     // opzxxx #3
    -2.828427124746190e+01,  0.000000000000000e+00 } ); // opzxxx #3
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02, -4.000000000000000e+02,     // oxzxxx #3
    -1.800000000000000e+02, -2.400000000000000e+02,     // oxzxxx #3
     0.000000000000000e+00,  0.000000000000000e+00,     // oxzxxx #3
     0.000000000000000e+00,  0.000000000000000e+00,     // oxzxxx #3
     6.000000000000000e+00,  8.000000000000000e+00,     // oxzxxx #3
    -3.000000000000000e+01,  0.000000000000000e+00 } ); // oxzxxx #3
  expwfs.push_back( {                                   // ---------
     5.000000000000000e+02, -4.000000000000000e+02,     // ixxxxx #4
     1.800000000000000e+02,  2.400000000000000e+02,     // ixxxxx #4
     1.800000000000000e+01, -2.400000000000000e+01,     // ixxxxx #4
    -1.000000000000000e+01,  0.000000000000000e+00,     // ixxxxx #4
     0.000000000000000e+00,  0.000000000000000e+00,     // ixxxxx #4
     0.000000000000000e+00,  0.000000000000000e+00 } ); // ixxxxx #4
  expwfs.push_back( {                                   // ---------
     4.000000000000000e+02, -4.000000000000000e+02,     // imzxxx #4
     0.000000000000000e+00,  0.000000000000000e+00,     // imzxxx #4
    -2.828427124746190e+01,  0.000000000000000e+00,     // imzxxx #4
     0.000000000000000e+00,  0.000000000000000e+00,     // imzxxx #4
     0.000000000000000e+00,  0.000000000000000e+00,     // imzxxx #4
     0.000000000000000e+00,  0.000000000000000e+00 } ); // imzxxx #4
  expwfs.push_back( {                                   // ---------
     5.000000000000000e+02,  2.400000000000000e+02,     // ixzxxx #4
     5.000000000000000e+02,  1.800000000000000e+02,     // ixzxxx #4
     1.800000000000000e+01, -2.400000000000000e+01,     // ixzxxx #4
    -1.000000000000000e+01,  0.000000000000000e+00,     // ixzxxx #4
     0.000000000000000e+00,  0.000000000000000e+00,     // ixzxxx #4
     0.000000000000000e+00,  0.000000000000000e+00 } ); // ixzxxx #4
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02,  4.000000000000000e+02,     // vxxxxx #4
    -1.800000000000000e+02, -2.400000000000000e+02,     // vxxxxx #4
     0.000000000000000e+00,  0.000000000000000e+00,     // vxxxxx #4
     3.394112549695428e-01,  5.656854249492381e-01,     // vxxxxx #4
     4.525483399593904e-01, -4.242640687119285e-01,     // vxxxxx #4
     4.242640687119285e-01,  0.000000000000000e+00 } ); // vxxxxx #4
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02,  4.000000000000000e+02,     // sxxxxx #4
    -1.800000000000000e+02, -2.400000000000000e+02,     // sxxxxx #4
     1.000000000000000e+00,  0.000000000000000e+00,     // sxxxxx #4
     3.394112549695428e-01,  5.656854249492381e-01,     // sxxxxx #4
     4.525483399593904e-01, -4.242640687119285e-01,     // sxxxxx #4
     4.242640687119285e-01,  0.000000000000000e+00 } ); // sxxxxx #4
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02,  4.000000000000000e+02,     // oxxxxx #4
    -1.800000000000000e+02, -2.400000000000000e+02,     // oxxxxx #4
     0.000000000000000e+00,  0.000000000000000e+00,     // oxxxxx #4
     0.000000000000000e+00,  0.000000000000000e+00,     // oxxxxx #4
     1.800000000000000e+01,  2.400000000000000e+01,     // oxxxxx #4
    -1.000000000000000e+01,  0.000000000000000e+00 } ); // oxxxxx #4
  expwfs.push_back( {                                   // ---------
    -4.000000000000000e+02,  4.000000000000000e+02,     // omzxxx #4
     0.000000000000000e+00,  0.000000000000000e+00,     // omzxxx #4
     0.000000000000000e+00,  0.000000000000000e+00,     // omzxxx #4
     0.000000000000000e+00,  0.000000000000000e+00,     // omzxxx #4
    -2.828427124746190e+01,  0.000000000000000e+00,     // omzxxx #4
    -2.828427124746190e+01,  0.000000000000000e+00 } ); // omzxxx #4
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02,  4.000000000000000e+02,     // oxzxxx #4
    -1.800000000000000e+02, -2.400000000000000e+02,     // oxzxxx #4
     0.000000000000000e+00,  0.000000000000000e+00,     // oxzxxx #4
     0.000000000000000e+00,  0.000000000000000e+00,     // oxzxxx #4
     1.800000000000000e+01,  2.400000000000000e+01,     // oxzxxx #4
    -1.000000000000000e+01,  0.000000000000000e+00 } ); // oxzxxx #4
  expwfs.push_back( {                                   // ---------
     0.000000000000000e+00,  0.000000000000000e+00,     // ixxxxx #5
     0.000000000000000e+00,  0.000000000000000e+00,     // ixxxxx #5
     0.000000000000000e+00,  0.000000000000000e+00,     // ixxxxx #5
    -2.236067977499790e+01,  0.000000000000000e+00,     // ixxxxx #5
     0.000000000000000e+00,  0.000000000000000e+00,     // ixxxxx #5
     2.200000000000000e+01,  0.000000000000000e+00 } ); // ixxxxx #5
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02, -0.000000000000000e+00,     // vxxxxx #5
    -0.000000000000000e+00, -0.000000000000000e+00,     // vxxxxx #5
     0.000000000000000e+00,  0.000000000000000e+00,     // vxxxxx #5
    -7.071067811865476e-01,  0.000000000000000e+00,     // vxxxxx #5
     0.000000000000000e+00, -7.071067811865476e-01,     // vxxxxx #5
     0.000000000000000e+00,  0.000000000000000e+00 } ); // vxxxxx #5
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02, -0.000000000000000e+00,     // sxxxxx #5
    -0.000000000000000e+00, -0.000000000000000e+00,     // sxxxxx #5
     1.000000000000000e+00,  0.000000000000000e+00,     // sxxxxx #5
    -7.071067811865476e-01,  0.000000000000000e+00,     // sxxxxx #5
     0.000000000000000e+00, -7.071067811865476e-01,     // sxxxxx #5
     0.000000000000000e+00,  0.000000000000000e+00 } ); // sxxxxx #5
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02, -0.000000000000000e+00,     // oxxxxx #5
    -0.000000000000000e+00, -0.000000000000000e+00,     // oxxxxx #5
     0.000000000000000e+00,  0.000000000000000e+00,     // oxxxxx #5
     2.200000000000000e+01,  0.000000000000000e+00,     // oxxxxx #5
     0.000000000000000e+00,  0.000000000000000e+00,     // oxxxxx #5
    -2.236067977499790e+01,  0.000000000000000e+00 } ); // oxxxxx #5
  expwfs.push_back( {                                   // ---------
     3.000000000000000e+02, -3.000000000000000e+02,     // ixxxxx #6
     0.000000000000000e+00,  0.000000000000000e+00,     // ixxxxx #6
    -2.449489742783178e+01, -0.000000000000000e+00,     // ixxxxx #6
    -0.000000000000000e+00, -0.000000000000000e+00,     // ixxxxx #6
     1.632993161855452e+01,  0.000000000000000e+00,     // ixxxxx #6
     0.000000000000000e+00,  0.000000000000000e+00 } ); // ixxxxx #6
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02,  3.000000000000000e+02,     // vxxxxx #6
    -0.000000000000000e+00, -0.000000000000000e+00,     // vxxxxx #6
     0.000000000000000e+00,  0.000000000000000e+00,     // vxxxxx #6
    -7.071067811865476e-01,  0.000000000000000e+00,     // vxxxxx #6
     0.000000000000000e+00,  0.000000000000000e+00,     // vxxxxx #6
     0.000000000000000e+00,  0.000000000000000e+00 } ); // vxxxxx #6
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02,  3.000000000000000e+02,     // sxxxxx #6
    -0.000000000000000e+00, -0.000000000000000e+00,     // sxxxxx #6
     1.000000000000000e+00,  0.000000000000000e+00,     // sxxxxx #6
    -7.071067811865476e-01,  0.000000000000000e+00,     // sxxxxx #6
     0.000000000000000e+00,  0.000000000000000e+00,     // sxxxxx #6
     0.000000000000000e+00,  0.000000000000000e+00 } ); // sxxxxx #6
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02,  3.000000000000000e+02,     // oxxxxx #6
    -0.000000000000000e+00, -0.000000000000000e+00,     // oxxxxx #6
     1.414213562373095e+01,  0.000000000000000e+00,     // oxxxxx #6
     0.000000000000000e+00,  0.000000000000000e+00,     // oxxxxx #6
    -2.828427124746190e+01, -0.000000000000000e+00,     // oxxxxx #6
    -0.000000000000000e+00, -0.000000000000000e+00 } ); // oxxxxx #6
  expwfs.push_back( {                                   // ---------
     3.000000000000000e+02, -1.440000000000000e+02,     // ixxxxx #7
     1.800000000000000e+02,  1.920000000000000e+02,     // ixxxxx #7
     1.441153384245784e+01, -1.537230276528837e+01,     // ixxxxx #7
    -1.248999599679680e+01, -0.000000000000000e+00,     // ixxxxx #7
    -9.607689228305230e+00,  1.024820184352558e+01,     // ixxxxx #7
     8.326663997864532e+00,  0.000000000000000e+00 } ); // ixxxxx #7
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02,  1.440000000000000e+02,     // vxxxxx #7
    -1.800000000000000e+02, -1.920000000000000e+02,     // vxxxxx #7
     0.000000000000000e+00,  0.000000000000000e+00,     // vxxxxx #7
     2.321373168788980e-01,  5.158607041753289e-01,     // vxxxxx #7
     2.476131380041579e-01, -4.836194101643708e-01,     // vxxxxx #7
     6.203224967708328e-01,  0.000000000000000e+00 } ); // vxxxxx #7
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02,  1.440000000000000e+02,     // sxxxxx #7
    -1.800000000000000e+02, -1.920000000000000e+02,     // sxxxxx #7
     1.000000000000000e+00,  0.000000000000000e+00,     // sxxxxx #7
     2.321373168788980e-01,  5.158607041753289e-01,     // sxxxxx #7
     2.476131380041579e-01, -4.836194101643708e-01,     // sxxxxx #7
     6.203224967708328e-01,  0.000000000000000e+00 } ); // sxxxxx #7
  expwfs.push_back( {                                   // ---------
    -5.000000000000000e+02,  1.440000000000000e+02,     // oxxxxx #7
    -1.800000000000000e+02, -1.920000000000000e+02,     // oxxxxx #7
    -8.320502943378436e+00, -8.875203139603666e+00,     // oxxxxx #7
     7.211102550927978e+00,  0.000000000000000e+00,     // oxxxxx #7
     1.664100588675688e+01,  1.775040627920733e+01,     // oxxxxx #7
    -1.442220510185596e+01, -0.000000000000000e+00 } ); // oxxxxx #7
  // Compute the output wavefunctions
  using namespace MG5_sm;
  const int nwf6 = 6;  
  auto printwf6 = []( const cxtype wf[6], const char* xxx, int ievt ) {
    std::cout << std::setprecision(15) << std::scientific;
    std::cout << "  expwfs.push_back( {";
    std::cout << "                                   // ---------" << std::endl;
    for ( int iwf6 = 0; iwf6<nwf6; iwf6++ )
    {
      std::cout << std::setw(26) << wf[iwf6].real() << ", " << std::setw(22) << wf[iwf6].imag();
      if ( iwf6 < nwf6-1 ) std::cout << ",    ";
      else std::cout << " } );";
      std::cout << " // " << xxx << " #" << ievt << std::endl;
    }
    std::cout << std::defaultfloat;
  };
  int itest = 0; // index on the expected output vector
  auto testwf6 = [&]( const cxtype wf[6], const char* xxx, int ievt ) {
    if ( dumpEvents ) printwf6( wf, xxx, ievt );
    if ( testEvents )
    {
      //std::cout << "Testing " << itest << ": " << xxx << " #" << ievt << std::endl;
      std::array<fptype,12>& expwf = expwfs[itest];
      for ( int iwf6 = 0; iwf6<nwf6; iwf6++ )
        EXPECT_NEAR( wf[iwf6].real(), expwf[iwf6*2], std::abs( expwf[iwf6*2] * toleranceXXXs ) );
    }
    itest++;
  };
  const int ihel = +1;
  const int nsf = -1;
  cxtype outwf[6];
  for ( int ievt=0; ievt<nevt; ievt++ )
  {    
    if ( false )
    {
      std::cout << std::endl;
      for ( int ip4=0; ip4<np4; ip4++ ) std::cout << par0[ievt*np4 + ip4] << ", ";
      std::cout << std::endl;
    }
    // Test ixxxxx - NO ASSUMPTIONS
    {
      const fptype fmass = mass0[ievt];
      ixxxxx( hstMomenta.get(), fmass, ihel, nsf, outwf, ievt, ipar );
      testwf6( outwf, "ixxxxx", ievt );
    }
    // Test ipzxxx - ASSUMPTIONS: (FMASS == 0) and (PX == PY == 0 and E == +PZ > 0)
    if ( mass0[ievt] == 0 && ispzgt0[ievt] )
    {
      ipzxxx( hstMomenta.get(), ihel, nsf, outwf, ievt, ipar );
      testwf6( outwf, "ipzxxx", ievt );
    }
    // Test imzxxx - ASSUMPTIONS: (FMASS == 0) and (PX == PY == 0 and E == -PZ > 0)
    if ( mass0[ievt] == 0 && ispzlt0[ievt] )
    {
      imzxxx( hstMomenta.get(), ihel, nsf, outwf, ievt, ipar );
      testwf6( outwf, "imzxxx", ievt );
    }
    // Test ixzxxx - ASSUMPTIONS: (FMASS == 0) and (PT > 0)
    if ( mass0[ievt] == 0 && isptgt0[ievt] )
    {
      ixzxxx( hstMomenta.get(), ihel, nsf, outwf, ievt, ipar );
      testwf6( outwf, "ixzxxx", ievt );
    }
    // Test vxxxxx - NO ASSUMPTIONS
    {
      const fptype vmass = mass0[ievt];
      vxxxxx( hstMomenta.get(), vmass, ihel, nsf, outwf, ievt, ipar );
      testwf6( outwf, "vxxxxx", ievt );
    }
    // Test sxxxxx - NO ASSUMPTIONS
    {
      const fptype smass = mass0[ievt];
      sxxxxx( hstMomenta.get(), smass, ihel, nsf, outwf, ievt, ipar );
      testwf6( outwf, "sxxxxx", ievt );
    }
    // Test oxxxxx - NO ASSUMPTIONS
    {
      const fptype fmass = mass0[ievt];
      oxxxxx( hstMomenta.get(), fmass, ihel, nsf, outwf, ievt, ipar );
      testwf6( outwf, "oxxxxx", ievt );
    }
    // Test opzxxx - ASSUMPTIONS: (FMASS == 0) and (PX == PY == 0 and E == +PZ > 0)
    if ( mass0[ievt] == 0 && ispzgt0[ievt] )
    {
      opzxxx( hstMomenta.get(), ihel, nsf, outwf, ievt, ipar );
      testwf6( outwf, "opzxxx", ievt );
    }
    // Test omzxxx - ASSUMPTIONS: (FMASS == 0) and (PX == PY == 0 and E == -PZ > 0)
    if ( mass0[ievt] == 0 && ispzlt0[ievt] )
    {
      omzxxx( hstMomenta.get(), ihel, nsf, outwf, ievt, ipar );
      testwf6( outwf, "omzxxx", ievt );
    }
    // Test oxzxxx - ASSUMPTIONS: (FMASS == 0) and (PT > 0)
    if ( mass0[ievt] == 0 && isptgt0[ievt] )
    {
      oxzxxx( hstMomenta.get(), ihel, nsf, outwf, ievt, ipar );
      testwf6( outwf, "oxzxxx", ievt );
    }
  }
}
